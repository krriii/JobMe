<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Job Seeker Dashboard | JobMe</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .job-item:hover {
            border: 2px solid #3b82f6;
            /* Tailwind blue-500 */
            cursor: pointer;
        }

        .job-item:hover h3 {
            text-decoration: underline;
        }

        .fixed-sidebar {
            position: fixed;
            top: 0;
            left: 0;
            height: 100%;
        }

        .fixed-header {
            position: fixed;
            top: 0;
            left: 16rem;
            /* Width of the sidebar */
            right: 0;
            z-index: 10;
        }

        .main-content {
            margin-left: 16rem;
            /* Width of the sidebar */
            margin-top: 4rem;
            /* Height of the header */
            overflow-y: auto;
            height: calc(100vh - 4rem);
            /* Full height minus the header height */
        }

        /* Basic modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 50;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
    </style>
</head>

<body class="h-full bg-gray-100">
    <div class="flex">
        <!-- Sidebar -->
        <nav class="bg-gray-800 w-64 min-h-screen fixed-sidebar">
            <div class="flex items-center h-16 bg-gray-800">
                <h1 class="text-white text-2xl font-semibold">JobMe</h1>
            </div>
            <div class="mt-5 flex-1 flex flex-col">
                <ul class="space-y-2 px-2">
                    <li>
                        <a href="/api/auth/dashboard/jobseeker"
                            class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md">
                            <span class="text-sm font-medium">Dashboard</span>
                        </a>
                    </li>
                    <li>
                        <a href="/applications"
                            class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md">
                            <span class="text-sm font-medium">Applications</span>
                        </a>
                    </li>
                    <li>
                        <!-- Logout Button -->
                        <a href="#" id="logoutButton"
                            class="flex items-center px-4 py-2 text-gray-300 hover:bg-gray-700 hover:text-white rounded-md">
                            <svg class="text-gray-400 group-hover:text-gray-300 mr-4 flex-shrink-0 h-6 w-6"
                                xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                stroke="currentColor" aria-hidden="true">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                            </svg>
                            <span class="text-sm font-medium">Logout</span>
                        </a>
                    </li>
                </ul>
            </div>
        </nav>

        <!-- Main content -->
        <div class="flex-1 flex flex-col main-content">
            <!-- Header -->
            <header class="bg-white shadow-sm fixed-header">
                <div class="flex items-center justify-between mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
                    <h1 class="text-3xl font-bold tracking-tight text-gray-900">Welcome
                        <%= user.name %>
                    </h1>
                    <div class="relative">
                        <input type="text"
                            class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400"
                            placeholder="Search...">
                    </div>
                </div>
            </header>

            <!-- Job Listings -->
            <div class="flex flex-1 mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 mt-8">
                <div id="jobListings" class="w-full overflow-y-auto h-[calc(100vh-200px)]">
                    <h2 class="text-2xl font-bold mb-4">Job Listings</h2>
                    <div id="jobList" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <!-- Job listings will be dynamically inserted here -->
                    </div>
                </div>
            </div>

            <!-- Apply Now Modal -->
            <div id="applyModal" class="modal">
                <div class="modal-content">
                    <span id="closeApplyModal" class="close">&times;</span>
                    <h2 class="text-lg font-bold mb-4">Apply for Job</h2>
                    <form id="applicationForm" enctype="multipart/form-data">
                        <input type="hidden" id="jobId" name="job_id">
                        <input type="hidden" id="jobSeekerId" name="job_seeker_id">

                        <label class="block text-sm font-medium text-gray-700">Upload Resume</label>
                        <input type="file" id="resumeFile" name="resume" accept=".pdf,.doc,.docx"
                            class="mt-1 p-2 border rounded w-full" required>

                        <button type="submit"
                            class="mt-4 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600">Submit
                            Application</button>
                        <button type="button" id="cancelApplyModal"
                            class="ml-2 text-gray-600 hover:underline">Cancel</button>
                    </form>
                </div>
            </div>

            <!-- Logout Confirmation Modal -->
            <div id="logoutModal" class="modal">
                <div class="modal-content">
                    <span id="closeLogoutModal" class="close">&times;</span>
                    <h2 class="text-2xl font-bold mb-4">Logout Confirmation</h2>
                    <p>Are you sure you want to logout from the dashboard?</p>
                    <div class="flex justify-end mt-4">
                        <button id="confirmLogoutButton"
                            class="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition">Logout</button>
                        <button id="cancelLogoutButton"
                            class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 transition ml-2">Cancel</button>
                    </div>
                </div>
            </div>

            <!-- Application Success Message Modal -->
            <div id="applicationSuccessModal" class="modal">
                <div class="modal-content">
                    <span id="closeApplicationSuccessModal" class="close">&times;</span>
                    <h2 class="text-2xl font-bold mb-4">Application Submitted!</h2>
                    <p>Your application has been submitted successfully.</p>
                    <div class="flex justify-end mt-4">
                        <button id="closeApplicationSuccessButton"
                            class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition">Close</button>
                    </div>
                </div>
            </div>

            <!-- Application Update Modal -->
            <div id="applicationUpdateModal" class="modal">
                <div class="modal-content">
                    <span id="closeApplicationUpdateModal" class="close">&times;</span>
                    <h2 class="text-2xl font-bold mb-4">Application Update</h2>
                    <p>Are you sure you want to update the application?</p>
                    <div class="flex justify-end mt-4">
                        <button id="confirmApplicationUpdateButton"
                            class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition">Confirm
                            Update</button>
                        <button id="cancelApplicationUpdateButton"
                            class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 transition ml-2">Cancel</button>
                    </div>
                </div>
            </div>

            <!-- Already Applied Modal -->
            <div id="alreadyAppliedModal" class="modal">
                <div class="modal-content">
                    <span id="closeAlreadyAppliedModal" class="close">&times;</span>
                    <h2 class="text-2xl font-bold mb-4">Already Applied</h2>
                    <p>You have already applied to this job. Please wait for the employer to respond to you via
                        email.</p>
                    <div class="flex justify-end mt-4">
                        <button id="closeAlreadyAppliedButton"
                            class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition">Close</button>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <script>
        async function loadJobListings() {
            try {
                const response = await fetch('/api/jobs');
                const jobs = await response.json();

                const jobList = document.getElementById('jobList');
                jobList.innerHTML = '';

                // Assume you have the job seeker ID available globally
                const currentJobSeekerId = "<%= user.user_id %>";

                for (const job of jobs) {
                    const jobItem = document.createElement('div');
                    jobItem.className = 'job-item p-6 bg-white rounded-lg shadow-md flex flex-col space-y-4';
                    jobItem.innerHTML = `
                        <h3 class="text-xl font-bold text-black">${job.title}</h3>
                        <a href="${job.website}" class="text-blue-500 hover:underline">${job.website}</a>
                        <p class="text-gray-500">${job.location}</p>
                        <p class="text-gray-500">${job.salary}</p>
                        <p class="text-gray-500">${job.jobType}</p>
                        <p class="text-gray-700">${job.description}</p>
                        <button class="apply-job bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition mt-4" data-job-id="${job.job_id}">Apply Now</button>
                    `;
                    jobList.appendChild(jobItem);

                    //Check if already applied on load
                    const hasApplied = await checkIfAlreadyApplied(currentJobSeekerId, job.job_id)
                    if (hasApplied) {
                        const applyButton = jobItem.querySelector('.apply-job');
                        applyButton.disabled = true;
                        applyButton.innerText = 'Already Applied';
                        applyButton.classList.remove('bg-blue-500', 'hover:bg-blue-600');
                        applyButton.classList.add('bg-gray-400', 'cursor-not-allowed');

                    }
                }
            } catch (error) {
                console.error('Error loading job listings:', error);
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            const applyModal = document.getElementById("applyModal");
            const applicationForm = document.getElementById("applicationForm");
            const jobIdInput = document.getElementById("jobId");
            const jobSeekerIdInput = document.getElementById("jobSeekerId");
            const closeModalButton = document.getElementById("closeApplyModal");
            const cancelModalButton = document.getElementById("cancelApplyModal");

            // Success/Error Modal Elements
            const successModal = document.getElementById('applicationSuccessModal');

            // Already Applied Modal
            const alreadyAppliedModal = document.getElementById('alreadyAppliedModal');
            const closeAlreadyAppliedButton = document.getElementById('closeAlreadyAppliedButton');

            // Assume you have the job seeker ID available globally
            const currentJobSeekerId = "<%= user.user_id %>";

            document.addEventListener("click", async function (event) {
                if (event.target.classList.contains("apply-job")) {
                    let jobId = event.target.dataset.jobId;

                    jobIdInput.value = jobId;
                    jobSeekerIdInput.value = currentJobSeekerId;

                    // Check if the job seeker has already applied for this job
                    const alreadyApplied = await checkIfAlreadyApplied(currentJobSeekerId, jobId);

                    if (alreadyApplied) {
                        // Show already applied modal
                        alreadyAppliedModal.style.display = "block";
                    } else {
                        // Open apply modal
                        applyModal.style.display = "block";
                    }
                }
            });

            closeModalButton.addEventListener("click", function () {
                applyModal.style.display = "none";
            });

            cancelModalButton.addEventListener("click", function () {
                applyModal.style.display = "none";
            });

            closeAlreadyAppliedButton.addEventListener("click", function () {
                alreadyAppliedModal.style.display = "none";
            });


            applicationForm.addEventListener("submit", async function (event) {
                event.preventDefault();
                const formData = new FormData(applicationForm);

                try {
                    const response = await fetch("/api/applications/apply", {
                        method: "POST",
                        body: formData,
                    });

                    if (response.ok) {
                        // Show success message and close modal
                        applyModal.style.display = "none";
                        successModal.style.display = "block";
                        setTimeout(() => {
                            successModal.style.display = "none";
                        }, 3000); // Display success message for 3 seconds
                    } else {
                        // Handle error (show an alert, or preferably, an error message in the modal)
                        const errorData = await response.json();
                        alert("Error: " + (errorData.message || "Failed to submit application"));
                    }
                } catch (error) {
                    console.error("Error applying for job:", error);
                    alert("Failed to apply. Please try again later.");
                }
            });

            // Get the logout modal elements
            const logoutModal = document.getElementById("logoutModal");
            const logoutButton = document.getElementById("logoutButton");
            const closeLogoutModal = document.getElementById("closeLogoutModal");
            const confirmLogoutButton = document.getElementById("confirmLogoutButton");
            const cancelLogoutButton = document.getElementById("cancelLogoutButton");

            // Logout modal functionality
            logoutButton.addEventListener("click", function (event) {
                event.preventDefault(); // Prevent the default link behavior
                logoutModal.style.display = "block";
            });

            closeLogoutModal.addEventListener("click", function () {
                logoutModal.style.display = "none";
            });

            cancelLogoutButton.addEventListener("click", function () {
                logoutModal.style.display = "none";
            });

            confirmLogoutButton.addEventListener("click", function () {
                window.location.href = "/api/auth/login"; // Redirect to the logout URL
            });

            // When the user clicks anywhere outside of the modal, close it
            window.onclick = function (event) {
                if (event.target == applyModal) {
                    applyModal.style.display = "none";
                }
                if (event.target == logoutModal) {
                    logoutModal.style.display = "none";
                }
                if (event.target == alreadyAppliedModal) {
                    alreadyAppliedModal.style.display = "none";
                }
            }
        });

        // Function to check if a job seeker has already applied for a job
//         async function checkIfAlreadyApplied(jobSeekerId, jobId) {
//     try {
//         const response = await fetch(`/api/applications/check?job_seeker_id=${jobSeekerId}&job_id=${jobId}`);

//         if (response.status === 404) {
//             console.error('Error checking application status: 404');
//             return false;
//         }

//         const data = await response.json();
//         return data.alreadyApplied;
//     } catch (error) {
//         console.error("Error checking application status:", error);
//         return false;
//     }
// }

// async function checkIfAlreadyApplied(jobSeekerId, jobId) {
//     try {
//         const response = await fetch(`/api/applications/check?job_seeker_id=${jobSeekerId}&job_id=${jobId}`);

//         if (response.status === 404) {
//             console.error('Error checking application status: 404');
//             return false;
//         }

//         const data = await response.json();
//         return data.alreadyApplied;
//     } catch (error) {
//         console.error("Error checking application status:", error);
//         return false;
//     }
// }

async function checkIfAlreadyApplied(jobSeekerId, jobId) {
    try {
        const response = await fetch("/api/applications/check", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ job_seeker_id: jobSeekerId, job_id: jobId }),
        });

        if (!response.ok) {
            console.error("Error checking application status:", response.status);
            return false;
        }

        const data = await response.json();
        return data.alreadyApplied;
    } catch (error) {
        console.error("Error checking application status:", error);
        return false;
    }
}


        // Call this function when the page loads
        window.onload = function () {
            loadJobListings();
        };

        
    </script>
</body>

</html>
